---
title: Analytic Geometry
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 4
    page-layout: full
    grid:
      body-width: 1000px
      sidebar-width: 300px
      margin-width: 300px
      gutter-width: 2rem
    theme:
      light: [flatly, custom.scss]
      dark: [darkly, custom.scss]
    self-contained: true
---

## Introduction

Euclidian space is a fundamental concept in mathematics. It is defined by a set of axioms (attributed to ancient Greek mathematician Euclid, 300 BC).

* [Euclidean geometry](https://en.wikipedia.org/wiki/Euclidean_geometry)
* [Hilbert's axioms](https://en.wikipedia.org/wiki/Hilbert%27s_axioms)

In Euclidean space, we have few basic concepts:

**Primitive terms**

* Points
* Lines
* Planes

**Primitive relations**

* Betweenness
* Lies on
* Congruence

Using just axioms of Euclidean geometry it is very hard proving new theorems. Thanks to [Decartes](https://en.wikipedia.org/wiki/Ren%C3%A9_Descartes) we can introduce a new concept called Cartesian space. This new approach allows us to use numbers and algebra to describe the objects and relations in the Euclidean space.

**Analytic geometry** is a branch of mathematics that deals with the study of geometry concepts like points, lines, curves, surfaces, and many more, in the context of a Cartesian coordinate system. Analytic geometry allows us to describe geometric objects using algebraic equations. It provides a powerful tool for solving geometric problems by transforming them into algebraic problems.

Now we will build a [Cartesian space](https://en.wikipedia.org/wiki/Analytic_geometry) step by step.

## Building a Cartesian space

#### **Let's take a Euclidean plane**

This is pure Euclidean plane, without any structures (lines, circles, etc.).

```{python}
#|echo: false
import matplotlib.pyplot as plt

#|echo: false
fig, ax = plt.subplots(figsize=(6, 6))
# red background for the figure
fig.patch.set_facecolor('lightgray')

ax.set_aspect('equal')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
# turn off the axis
ax.axis('off')

# Display the plot
plt.show()
```


#### **Draw a line**

Let's draw a line. We will call it $x$.

```{python}
#|echo: false
fig, ax = plt.subplots(figsize=(6, 6))
# red background for the figure
fig.patch.set_facecolor('lightgray')


ax.set_aspect('equal')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
# turn off the axis
ax.axis('off')

# Draw a line
plt.plot([-10, 10], [0, 0], color='black', linewidth=2)

# Display the plot
plt.show()
```


#### **Draw a point on the line**

You can choose any point on the line.

```{python}
#|echo: false
fig, ax = plt.subplots(figsize=(6, 6))
# red background for the figure
fig.patch.set_facecolor('lightgray')


ax.set_aspect('equal')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
# turn off the axis
ax.axis('off')

# Draw a line
plt.plot([-10, 10], [0, 0], color='black', linewidth=2)
plt.plot(0, 0, 'ro', markersize=10)

# Display the plot
plt.show()

```

#### **Draw a perpendicular line**

By axioms of Euclidean geometry, you can draw a perpendicular line to the first line which passes through the chosen point. This line is unique and it passes through the chosen point. We will call this line $y$.

```{python}
#|echo: false
fig, ax = plt.subplots(figsize=(6, 6))
# red background for the figure
fig.patch.set_facecolor('lightgray')

ax.set_aspect('equal')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
# turn off the axis
ax.axis('off')

# Draw the original line
plt.plot([-10, 10], [0, 0], color='black', linewidth=2)
# Draw the perpendicular line
plt.plot([0, 0], [-10, 10], color='black', linewidth=2)
# Mark the chosen point
plt.plot(0, 0, 'ro', markersize=10)

# Display the plot
plt.show()
```

A red point is called the origin of the Cartesian space.
These lines are called the axes of the Cartesian space.

#### **Defining the unit length**

Now, you can choose second point on $x$-axis different from the origin.
Distance between these two points will be called the unit length of the Cartesian space.

By Euclidean axioms, you can fill the whole $x$-axis with points separated by the unit length.

Also, by the axioms of Euclidean geometry, you can find a point on the $y$-axis such that the distance between this point and the origin is equal to the unit length, and further points on the $y$-axis are separated by the unit length.

By doing this, we introduce numbers to the Euclidian space. 

Those numbers describe the position of the points on the each axis.

```{python}

#|echo: false
fig, ax = plt.subplots(figsize=(6, 6))
# red background for the figure
fig.patch.set_facecolor('lightgray')

ax.set_aspect('equal')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
# turn off the axis
ax.axis('off')

# Draw the original line
plt.plot([-10, 10], [0, 0], color='black', linewidth=2)
# Draw the perpendicular line
plt.plot([0, 0], [-10, 10], color='black', linewidth=2)


# Mark additional points on the axes
for i in range(-9, 10):
    plt.plot(i, 0, 'bo', markersize=5)
    plt.plot(0, i, 'bo', markersize=5)
    if i != 0:  # Avoid overlapping label at the origin
        plt.text(i, -0.7, f'{i}', fontsize=8, ha='center')
        plt.text(-0.7, i, f'{i}', fontsize=8, ha='center')

# Mark the origin
plt.plot(0, 0, 'ro', markersize=10)

# Display the plot
plt.show()
```

#### **Describing the position of any point**

Letâ€™s consider any point $P$ on the plane. From the axioms of Euclidean geometry, we know that there exists a unique line passing through this point that is perpendicular to the first axis. Similarly, there is a unique line that is perpendicular to the second axis and passes through point $P$. These lines intersect the axes at unique points $A$ and $B$, respectively. Since, for any point $P$, there are unique points $A$ and $B$ on the axes, we can define the position of $P$ by these numbers. We call these numbers the coordinates of point $P$.

We have just defined the **Cartesian coordinate system**.

```{python}
#|echo: false
fig, ax = plt.subplots(figsize=(6, 6))
# red background for the figure
fig.patch.set_facecolor('lightgray')

ax.set_aspect('equal')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
# turn off the axis
ax.axis('off')

# Draw the original line
plt.plot([-10, 10], [0, 0], color='black', linewidth=2)
# Draw the perpendicular line
plt.plot([0, 0], [-10, 10], color='black', linewidth=2)

# Mark additional points on the axes
for i in range(-9, 10):
    plt.plot(i, 0, 'bo', markersize=5)
    plt.plot(0, i, 'bo', markersize=5)
    if i != 0:  # Avoid overlapping label at the origin
        plt.text(i, -0.7, f'{i}', fontsize=8, ha='center')
        plt.text(-0.7, i, f'{i}', fontsize=8, ha='center')

# Mark the origin
plt.plot(0, 0, 'ro', markersize=10)

# Define point P
P = (4, 5)
plt.plot(P[0], P[1], 'go', markersize=10)
plt.text(P[0], P[1] + 0.5, 'P(4, 5)', fontsize=8, ha='center')

# Draw projections of P on the axes
plt.plot([P[0], P[0]], [0, P[1]], 'r--', linewidth=1, label='Px')
plt.plot([0, P[0]], [P[1], P[1]], 'r--', linewidth=1, label='Py')

# Display the plot
plt.show()
```

#### **Summary**

We have built a Cartesian plane. We have introduced numbers to the Euclidean plane. We can describe the position of any point on a plane by two numbers. 

Now we will investigate how we can use algebra to describe the relations between points in the Euclidean space.

## Cartesian plane

Below we present some basic terms and operations in the Cartesian space.

#### Distance between two points

The distance between two points $P_1=(x_1, y_1)$ and $P_2=(x_2, y_2)$ is given by the formula:

$$
d(P_1, P_2) = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}
$$

#### Midpoint of a line segment

The midpoint of a line segment with endpoints $P_1=(x_1, y_1)$ and $P_2=(x_2, y_2)$ is given by the formula:

$$
M(P_1, P_2)=\left(\frac{x_1 + x_2}{2}, \frac{y_1 + y_2}{2}\right)
$$

#### Addition of two points

The sum of two points $P_1(x_1, y_1)$ and $P_2(x_2, y_2)$ is given by the formula:

$$
P_1 + P_2 = (x_1 + x_2, y_1 + y_2)
$$

#### Subtraction of two points

The difference of two points $P_1(x_1, y_1)$ and $P_2(x_2, y_2)$ is given by the formula:

$$
P_1 - P_2 = (x_1 - x_2, y_1 - y_2)
$$

#### Multiplication of a point by a scalar

The multiplication of a point $P(x, y)$ by a scalar $k$ is given by the formula:

$$
k \cdot P = (k \cdot x, k \cdot y)
$$


#### Vector

Ordered two points $P_1(x_1, y_1)$ and $P_2(x_2, y_2)$ define a **vector**. On plane vector is represented by an arrow pointing from $P_1$ to $P_2$. 


```{python}
#|echo: false
import matplotlib.pyplot as plt

# Set up the plot
fig, ax = plt.subplots(figsize=(6, 6))

# Define the grid with unit steps
ax.set_xticks(range(-10, 11))
ax.set_yticks(range(-10, 11))
ax.grid(True)

# Draw x and y axes
plt.axhline(0, color='black', linewidth=2)
plt.axvline(0, color='black', linewidth=2)

# Only show ticks on the axes spines
ax.spines['left'].set_position('zero')
ax.spines['bottom'].set_position('zero')
ax.spines['top'].set_color('none')
ax.spines['right'].set_color('none')

# Hide ticks on the top and right spines
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')

# Define points
point1 = (1, 2)
point2 = (5, 6)

# Define the labes
plt.text(point1[0], point1[1] - 0.5, 'P1(1, 2)', fontsize=12, ha='center')
plt.text(point2[0], point2[1] + 0.5, 'P2(5, 6)', fontsize=12, ha='center')

# Define the vector
plt.quiver(point1[0], point1[1], point2[0] - point1[0], point2[1] - point1[1], angles='xy', scale_units='xy', scale=1, color='blue')

# Mark the points
plt.plot(point1[0], point1[1], 'ro', markersize=10, label='P1(1, 2)')
plt.plot(point2[0], point2[1], 'ro', markersize=10, label='P2(5, 6)')

# Set plot limits
plt.xlim(-3, 7)
plt.ylim(-3, 7)

# Display the plot
plt.show()

```

Vectors are very useful in geometry. They can also be used to represent physical quantities like velocity, force, acceleration, electric field, etc.


## Higher dimensional Cartesian space

In the case of a plane, we observe that two numbers are required to describe the position of any point, which is why we refer to it as two-dimensional space. We can extend this concept further by introducing a new axis perpendicular to the existing ones. In this way, we define three-dimensional Cartesian space. 

By continuing this process, we can define four-dimensional Cartesian space, and so on. Consequently, in $n$-dimensional space, $n$ numbers are needed to describe the position of any point.

We will be discussing two-dimensional and three-dimensional Cartesian spaces in more detail. Conventionally, we denote:

- in 2D, each point can be written as $(x, y)$.
- in 3D, points are of the form $(x, y, z)$.

## Vectors

A vector can be represented with an arrow between points. It is denoted by arrow above the symbol $\vec{a}$ or in bold font $\mathbf{a}$.

From the definition of a vector, we can describe its atributes:

* **Magnitude** is a segment length between the points defining the vector. It is denoted by $|\mathbf{a}|$.
* **Direction** is encoded in the order of the points defining the vector. We can also use angles to describe the direction of the vector.
* **Coordinates** are the differences between the coordinates of the points defining the vector. For example, for a vector $\mathbf{a}$ defined by points $P_1(x_1, y_1)$ and $P_2(x_2, y_2)$, the coordinates of the vector are $[x_2 - x_1, y_2 - y_1]$.

Unit vector is a vector with a magnitude equal to 1. For convenience, the unit vector is often denoted by "hat", i.e. $\hat{\mathbf{a}}$ (pronounced "a-hat").

Any non-zero vector $\mathbf{a}$ can be transformed into a unit vector $\hat{\mathbf{a}}$ by dividing it by its magnitude

$$
\mathbf{a}\quad\rightarrow\quad\hat{\mathbf{a}} = \frac{\mathbf{a}}{|\mathbf{a}|}
$$

**Example:**

The vector $\mathbf{a}= [3, 4]$ has a magnitude $|\mathbf{a}| = 5$, and the corresponding unit vector (the unit vector along the direction of vector $\mathbf{a}$) is expressed as $\hat{\mathbf{a}} = \left[\frac{3}{5}, \frac{4}{5}\right]$.

### Affine Space

Two vectors can have the same direction and magnitude but originate from different points. 

```{python}
#|echo: false
import matplotlib.pyplot as plt # import the matplotlib.pyplot module #example of vector addition in two-dimensional space

plt.figure() # create a new figure
plt.quiver(0, 0, 1, 2, angles='xy', scale_units='xy', scale=1, color='r') # quick way to plot vectors quiver(x_start, y_start, x_end, y_end)
plt.quiver(2, 1, 1, 2, angles='xy', scale_units='xy', scale=1, color='b') # quick way to plot vectors quiver(x_start, y_start, x_end, y_end)
plt.xlim(0, 4) # set x-axis range
plt.ylim(0, 4) # set y-axis range
plt.grid(True) # enable grid
plt.gca().set_aspect('equal') # set equal scaling on x and y axes
plt.xticks(range(0, 5, 1)) # set x-axis ticks
plt.yticks(range(0, 5, 1)) # set x-axis ticks
plt.show()
```

In terms of their coordinates, these vectors will appear identical.

* Red vector: $\mathbf{a} = [1-0, 2-0]=[1, 2]$

* Blue vector: $\mathbf{b} = [3-2,3-1]=[1, 2]$

Literature, often 'hand waves' here and uses the following terms:

* A **fixed vector** originates from a specific point, typically the origin, and is defined by its endpoint coordinates.

* A **free vector** is defined solely by its magnitude and direction, independent of its starting point.

To properly address this subtle distinction, one has to introduce the concept of an affine space. In an affine space, vectors can be freely translated without altering their intrinsic properties. It is quite challenging, and goes beyond the scope of this course. It is crucial to be cautious when working with definitions that rely on vectors anchored at the origin of the coordinate system. This might be the source of many errors while working with vectors in computer systems.

### Basis

The **basis** of vectors is a set of vectors that spans a vector space. In Cartesian space, the standard basis vectors are $\hat{\mathbf{i}}, \hat{\mathbf{j}}, \hat{\mathbf{k}}$.

For 2D:

$$
\hat{\mathbf{i}} = [1, 0], \quad \hat{\mathbf{j}} = [0, 1]
$$

For 3D:

$$
\hat{\mathbf{i}} = [1, 0, 0], \quad \hat{\mathbf{j}} = [0, 1, 0], \quad \hat{\mathbf{k}} = [0, 0, 1]
$$

Note that basis vectors are unit vectors along the axes and are perpendicular to each other.

Vectors can be represented using components in the Cartesian coordinate system, where each component corresponds to the distance of the point from the respective coordinate axis.

- For a vector in two-dimensional space: $\mathbf{a} = [a_x, a_y] = a_x\hat{\mathbf{i}} + a_y\hat{\mathbf{j}}$
- For a vector in three-dimensional space: $\mathbf{a} = [a_x, a_y, a_z] = a_x\hat{\mathbf{i}} + a_y\hat{\mathbf{j}} + a_z\hat{\mathbf{k}}$

![](https://upload.wikimedia.org/wikipedia/commons/f/fd/3D_Vector.svg){width=400px}

Different coordinate systems that can be used to represent vectors:

* **Cartesian Coordinate System** is used in 2D and 3D and defines a point by its distance from the origin along the x, y, and z axes.

*  **Polar Coordinate System** is used in 2D and defines a point by its distance from the origin (r) and the angle (Î¸) relative to the reference axis. Link: [Polar Coordinate System](https://en.wikipedia.org/wiki/Polar_coordinate_system)

*  **Spherical Coordinate System** is used in 3D and defines a point by its distance from the origin (r), azimuth angle (Î¸), and elevation angle (Ï†). Link: [Spherical Coordinate System](https://en.wikipedia.org/wiki/Spherical_coordinate_system)

To find the coordinates of vector $\mathbf{v}$ in a new basis $\{\mathbf{b_1}, \mathbf{b_2}, \mathbf{b_3}\}$, express $\mathbf{v}$ as a linear combination of the basis vectors.

$$
\mathbf{v} = c_1 \mathbf{b_1} + c_2 \mathbf{b_2} + c_3 \mathbf{b_3}
$$

The coefficients $c_1, c_2, c_3$ are the coordinates of vector $\mathbf{v}$ in the new basis.

### Vector Addition

Vector addition involves adding the corresponding components of vectors of the same length.

For two vectors $\mathbf{a}$ and $\mathbf{b}$ in the space $\mathbb{R}^n$, where:

$$
\mathbf{a} = [{\color{red} a_1}, {\color{red} a_2}, \dots, {\color{red} a_n}], \quad \mathbf{b} = [{\color{blue} b_1}, {\color{blue} b_2}, \dots, {\color{blue} b_n}]
$$

Vector addition is defined as follows:

$$
\mathbf{a} + \mathbf{b} = [{\color{red} a_1} + {\color{blue} b_1}, {\color{red} a_2} + {\color{blue} b_2}, \dots, {\color{red} a_n} + {\color{blue} b_n}]
$$

### Scalar Multiplication of a Vector

Scalar multiplication of a vector involves multiplying each component of the vector by the same number.

For a vector $\mathbf{a}$ and a scalar $k$:

$$
{\color{maroon} k} \mathbf{a} = [{\color{maroon} k} a_1, {\color{maroon} k} a_2, \dots, {\color{maroon} k} a_n]
$$

### Vector's Length

Length of a vector is the magnitude of the vector. It is calculated as the square root of the sum of the squares of the components of the vector.
$$
|\mathbf{a}| = \sqrt{\sum_{i=1}^{n} a_i^2} = \sqrt{a_1^2 + a_2^2 + \dots + a_n^2} 
$$
**Vectors in 2D:**

If $\mathbf{a} = [a_x, a_y]$, then the magnitude is given by the formula $|\mathbf{a}| = a = \sqrt{a_x^2 + a_y^2}$.

**Vectors in 3D:**

If $\mathbf{a} = [a_x, a_y, a_z]$, then the magnitude of the vector is $|\mathbf{a}| = a = \sqrt{a_x^2 + a_y^2 + a_z^2}$.

### Plotting a Vector

```{python}
import matplotlib.pyplot as plt # import the matplotlib.pyplot module

plt.figure() # create a new figure
plt.quiver(0, 0, 3, 4, angles='xy', scale_units='xy', scale=1, color='r') # quick way to plot a vector quiver(x_start, y_start, x_vector_component, y_vector_component)
plt.xlim(0, 5) # set x-axis range
plt.ylim(0, 5) # set y-axis range
plt.grid(True) # enable grid
plt.gca().set_aspect('equal') # set equal scaling on x and y axes
plt.show()

```

More complicated example:

```{python}
import matplotlib.pyplot as plt # import the matplotlib.pyplot module #example of vector addition in two-dimensional space

plt.figure() # create a new figure
plt.quiver(0, 0, 2, 1, angles='xy', scale_units='xy', scale=1, color='r') # quick way to plot vectors quiver(x_start, y_start, component_x, component_y)
plt.quiver(0, 0, 1, 2, angles='xy', scale_units='xy', scale=1, color='b') # quick way to plot vectors quiver(x_start, y_start, component_x, component_y)
plt.quiver(0, 0, 3, 3, angles='xy', scale_units='xy', scale=1, color='g') # quick way to plot vectors quiver(x_start, y_start, component_x, component_y)
plt.quiver(1, 2, 2, 1, angles='xy', scale_units='xy', scale=1, color='y') # quick way to plot vectors quiver(x_start, y_start, component_x, component_y)
plt.quiver(2, 1, 1, 2, angles='xy', scale_units='xy', scale=1, color='m') # quick way to plot vectors quiver(x_start, y_start, component_x, component_y)
plt.xlim(-1, 4) # set x-axis range
plt.ylim(-1, 4) # set y-axis range
plt.grid(True) # enable grid
plt.gca().set_aspect('equal') # set equal scaling on x and y axes
plt.show()
```

### Scalar Product

The scalar product (also called the dot product) is an operation that takes two vectors and returns a scalar value. It is defined as the sum of the products of the corresponding components of two vectors.

For two vectors $\mathbf{a}$ and $\mathbf{b}$ in the space $\mathbb{R}^n$, where:
$$
\mathbf{a} = [{\color{red} a_1}, {\color{red} a_2}, \dots, {\color{red} a_n}], \quad \mathbf{b} = [{\color{blue} b_1}, {\color{blue} b_2}, \dots, {\color{blue} b_n}]
$$

The scalar product is defined as follows 
$$
\mathbf{a} \cdot \mathbf{b} = {\color{red} a_1} {\color{blue} b_1} + {\color{red} a_2} {\color{blue} b_2} + \dots + {\color{red} a_n} {\color{blue} b_n} = \sum_{i=1}^{n} {\color{red} a_i} {\color{blue} b_i}
$$

In three-dimensional space ($\mathbb{R}^3$) the scalar product of vectors $\mathbf{a} = [a_1, a_2, a_3]$ and $\mathbf{b} = [b_1, b_2, b_3]$ is defined as:
$$
\mathbf{a} \cdot \mathbf{b} = a_1 b_1 + a_2 b_2 + a_3 b_3
$$

The scalar product returns a number that measures the "similarity of direction" between two vectors. 

If $\mathbf{a} \cdot \mathbf{b} = 0$, the vectors are perpendicular, which is denoted as $\mathbf{a} \perp \mathbf{b}$.

Alternatively, the scalar product can be expressed as:

$$
\mathbf{a} \cdot \mathbf{b} = |\mathbf{a}| |\mathbf{b}| \cos(\theta),
$$
which is the product of the magnitudes of vectors $\mathbf{a}$ and $\mathbf{b}$ multiplied by the cosine of the angle between them.

Scalar product is commutative, i.e., $\mathbf{a} \cdot \mathbf{b} = \mathbf{b} \cdot \mathbf{a}$.

The scalar product can be used to find the length of a vector:

$$
|\mathbf{a}| = \sqrt{\mathbf{a} \cdot \mathbf{a}}
$$

### Cross Product (Vector Product)

The cross product is an operation that returns a new vector perpendicular to the two input vectors. It is defined only in three-dimensional space $\mathbb{R}^3$ (and ... [seven-dimensional](https://en.wikipedia.org/wiki/Seven-dimensional_cross_product) space).

For two vectors $\mathbf{a} = [a_1, a_2, a_3]$ and $\mathbf{b} = [b_1, b_2, b_3]$, the vector product $\mathbf{a} Â \times \mathbf{b}$ is defined as:

$$
\mathbf{a} Â  \times \mathbf{b} =
\begin{vmatrix}
\mathbf{i} & \mathbf{j} & \mathbf{k} \\
a_1 & a_2 & a_3 \\
b_1 & b_2 & b_3
\end{vmatrix}
$$

Where $\mathbf{i}, \mathbf{j}, \mathbf{k}$ are unit vectors along the $x, y, z$ axes. Interestingly, to calculate the vector product and obtain the resulting vector, we use the determinant (a scalar) of the matrix (a second-order tensor) whose rows are the basis vectors (vectors) and the components of the vectors (scalars).

The vector product can be expressed in expanded form:

$$
\mathbf{a} Â  \times \mathbf{b} = \left( a_2b_3 - a_3b_2 \right)\mathbf{i} - \left( a_1b_3 - a_3b_1 \right)\mathbf{j} + \left( a_1b_2 - a_2b_1 \right)\mathbf{k} $$

The result of the vector product is a new vector:

$$
\mathbf{a} \times \mathbf{b} = \mathbf{c} =[c_1, c_2, c_3] = [a_2b_3 - a_3b_2, a_3b_1 - a_1b_3, a_1b_2 - a_2b_1] $$

The vector product returns a vector $\mathbf{c}$ perpendicular to the plane defined by $\mathbf{a}$ and $\mathbf{b}$, and its magnitude is equal to the area of the parallelogram whose sides are defined by the vectors $\mathbf{a}$ and $\mathbf{b}$
$$
|\mathbf{c}| = |\mathbf{a}| |\mathbf{b}| \sin \theta
$$

where $\theta$ is the angle between the vectors. The direction of vector $\mathbf{c}$ is determined by the right-hand rule.

### Mixed Product

The mixed product of three vectors $\mathbf{a}, \mathbf{b}, \mathbf{c}$ is defined as:

$$
\mathbf{a} \cdot \left( \mathbf{b} \times \mathbf{c} \right)
$$

The mixed product is equal to zero if the vectors $\mathbf{a}, \mathbf{b}, \mathbf{c}$ are collinear or parallel.

The volume of the parallelepiped spanned by three vectors $\mathbf{a}, \mathbf{b}, \mathbf{c}$ is equal to the absolute value of the mixed product of these vectors.

### Applications

#### Calculating the Angle Between Vectors

$$
\cos \theta = \frac{\mathbf{a} \cdot \mathbf{b}}{|\mathbf{a}| |\mathbf{b}|}
$$

#### Checking Vector Perpendicularity

Vectors $\mathbf{a}$ and $\mathbf{b}$ are perpendicular if their dot product is zero:
$$
\mathbf{a} \cdot \mathbf{b} = 0
\quad \Leftrightarrow \quad
Â \mathbf{a} \perp \mathbf{b}
$$

#### Finding Projections of Vectors onto Other Vectors

$$
\text{Projection} = \frac{\mathbf{a} \cdot \mathbf{b}}{|\mathbf{b}|}
$$

#### Calculating Work Done by a Force in Physics

For a force $\mathbf{F} = (F_x, F_y, F_z)$ acting along a displacement $\mathbf{d} = (d_x, d_y, d_z)$, work is calculated as:

$$
W = \mathbf{F} \cdot \mathbf{d} = |\mathbf{F}| |\mathbf{d}| \cos \theta = F_x d_x + F_y d_y + F_z d_z
$$

#### Torque

In physics: torque is the vector product of the force vector and the arm of the force:

$$
\mathbf{M} = \mathbf{r} \times \mathbf{F}
$$

#### Calculating the Area of a Parallelogram

The area of a parallelogram spanned by two vectors:

$$
\text{Area}_{p} = |\mathbf{a} \times \mathbf{b}|= |\mathbf{a}| |\mathbf{b}| \sin \theta
$$

#### Calculating the Area of a Triangle

The area of a triangle spanned by two vectors $\mathbf{a}$ and $\mathbf{b}$:

$$
\text{Area}_{t} = \frac{1}{2} |\mathbf{a} \times \mathbf{b}|
$$

#### Calculating the Volume of Parallelipeds

The mixed product of vectors is used to calculate the volume of parallelepipeds. For three vectors $\mathbf{a}, \mathbf{b}, \mathbf{c}$, the volume of the parallelepiped is given by:
$$
V = |\mathbf{a} \cdot (\mathbf{b} \times \mathbf{c})|
$$

(Note: **| |** here denotes the absolute value, not the length!)

#### Calculating the Volume of Tetrahedrons

The volume of a tetrahedron spanned by three vectors $\mathbf{a}, \mathbf{b}, \mathbf{c}$ is given by:
$$
V = \frac{1}{6} |\mathbf{a} \cdot (\mathbf{b} \times \mathbf{c})|
$$

(Note: **| |** here denotes the absolute value, not the  length!)

#### Checking Coplanarity of three 3D vectors

If the mixed product of three 3Dvectors is equal to zero, it means that the vectors are coplanar (lie in the same plane, which make them linearly dependent).

## Geogebra Playground

...

## Exercises

Link: [Last version](link)