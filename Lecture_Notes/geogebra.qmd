---
title: GeoGebra Basics
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    page-layout: full
    grid:
      body-width: 1200px
      sidebar-width: 300px
      margin-width: 300px
      gutter-width: 2rem
    theme:
      light: [flatly, custom.scss]
      dark: [darkly, custom.scss]
    self-contained: true
---


## Introduction to GeoGebra

This document introduces essential GeoGebra functionalities for creating and manipulating objects such as points, segments, vectors, functions, curves, parameterizations, sliders, intersections, perpendicularity, and tangency.

## Points and Their Components

#### Creating a Point

- **Using the Point Tool**: Select the **Point** tool and click on the Graphics View to place a point.
- **Using the Input Field**: Enter `A = (3, 4)` to create point A at coordinates (3, 4).

#### Accessing Point Coordinates

- **X-Coordinate**: Use `x(A)` to get the x-coordinate of point A.
- **Y-Coordinate**: Use `y(A)` to get the y-coordinate of point A.

## Segments

#### Creating a Segment

- **Using the Segment Tool**: Select the **Segment** tool and click on two points to create a segment between them.
- **Using the Input Field**: Enter `Segment[A, B]` to create a segment between points A and B.

## Vectors

#### Creating a Vector

- **Using the Vector Tool**: Select the **Vector** tool and click on two points to create a vector from the first point to the second.
- **Using the Input Field**:
  - Enter `Vector[A, B]` to create a vector from point A to point B.
  - Define a vector by its components, e.g., `v = (3, 2)`.

#### Accessing Vector Components

- **X-Component**: Use `x(v)` to get the x-component of vector v.
- **Y-Component**: Use `y(v)` to get the y-component of vector v.

## Functions

#### Defining a Function

- Enter `f(x) = x^2 + 3x + 5` to define a function f.

## Curves

#### Creating a Parametric Curve

- Use the **Curve** tool or enter `Curve[expression, parameter, start, end]` in the input field.
- Example: `Curve[3 * cos(t), 2 * sin(t), t, 0, 2π]` creates an ellipse.

## Parameterization

- Parameterization involves using a parameter, often `t`, to define the x and y components of a curve.

## Sliders

- **Creating a Slider**: Use the **Slider** tool to create a slider.
- **Using a Slider**: Sliders can control parameters in functions, vectors, or any variable, enabling interactive models.
  - Example: Define a parameter `a` as a slider, then use `f(x) = a * x^2` to observe how changing `a` affects the graph.

## Intersections

- **Finding Intersection Points**:
  - Use the **Intersect** tool or enter `Intersect[object1, object2]` in the input field.
  - Example: `Intersect[f, g]` finds the intersection points of functions f and g.

## Perpendicularity

- **Creating a Perpendicular Line**:
  - Use the **Perpendicular Line** tool or enter `PerpendicularLine[point, line]` in the input field.
  - Example: `PerpendicularLine[A, l]` creates a line through point A perpendicular to line l.

## Tangency

- **Creating a Tangent Line**:
  - Use the **Tangent** tool or enter `Tangent[point, function]` in the input field.
  - Example: `Tangent[A, f]` creates a tangent line to function f at point A.

---

These fundamental GeoGebra commands enable the creation and manipulation of basic mathematical objects, facilitating the development of interactive models and dynamic exploration of mathematical relationships.

## Lines

In GeoGebra, lines can be represented in various forms depending on the equation and approach used. Here are some common equations for lines and how they can be implemented in GeoGebra:

#### 1. Slope-Intercept Form

The slope-intercept form of a line is given by the equation:

$$
y = mx + b
$$

where $m$ is the slope and $b$ is the y-intercept.

- **Implementation in GeoGebra**: Enter `y = m * x + b` directly into the input field. Varible `m` represents the slope, and `b` represents the y-intercept. Because we did not specify the values of `m` and `b`, GeoGebra will treat them as variables and create a dynamic slider that can be manipulated.

#### 2. Point-Slope Form

The point-slope form of a line is given by:

$$
y - y_1 = m(x - x_1)
$$

where $(x_1, y_1)$ is a point on the line and $m$ is the slope.

- **Implementation in GeoGebra**: First define a pont $A$ using `A = (1,2)` and then enter the equation of the line using the point-slope form: `y - y(A) = m * (x - x(A))` in the input field. Because we did not specify the value of `m`, GeoGebra will create a slider for the slope.

#### 3. General Form

The general form of a line is:

$$
Ax + By + C = 0
$$

where $A$, $B$, and $C$ are constants.

- **Implementation in GeoGebra**: First input letters: `A`, `B`, and `C` as variables using the input field. Theni input `A * x + B * y + C = 0`, and GeoGebra will treat $A$, $B$, and $C$ as variables that can be adjusted using sliders.

#### 4. Parametric Form

A line can also be described using a parameter $t$ as follows:

$$
\begin{align*}
x &= x_0 + t \cdot v_x\\
y &= y_0 + t \cdot v_y
\end{align*}
$$

where $(x_0, y_0)$ is a point on the line, and $(v_x, v_y)$ is a vector parallel to the line (direction vector).

- **Implementation in GeoGebra**: Define a point $A$ using `A = (1, 2)`. Use `Curve[x(A) + t * a, y(A) + t * b, t, -10, 10]`, becase we did not specify the values of `a` and `b`, GeoGebra will create sliders for them.

## Second Degree Curves

In GeoGebra, second-degree curves, such as circles, ellipses, parabolas, and hyperbolas, can be represented using various forms. Here are common equations for these curves and instructions for implementing them in GeoGebra.

#### 1. Circle

The equation of a circle with center $(h, k)$ and radius $r$ is:

$$
(x - h)^2 + (y - k)^2 = r^2
$$

- **Implementation in GeoGebra**: Define the center point using `A = (h, k)` and input ` (x - x(A))^2 + (y - y(A))^2 = r^2`. If $r$ is not defined, GeoGebra will create a slider for $r$ to dynamically adjust the radius.

#### 2. Ellipse

The general form of an ellipse centered at $(h, k)$ with semi-major axis $a$ and semi-minor axis $b$ is:

$$
\frac{(x - h)^2}{a^2} + \frac{(y - k)^2}{b^2} = 1
$$

- **Implementation in GeoGebra**: Define the center point using `A = (h, k)`. Then input `((x - x(A))^2 / a^2) + ((y - y(A))^2 / b^2) = 1`. If $a$ and $b$ are not defined, GeoGebra will automatically create sliders for these values, allowing dynamic resizing of the ellipse.

#### 3. Parabola

The equation of a parabola opening vertically with vertex $(h, k)$ and parameter $p$ (distance from the vertex to the focus) is:

$$
(y - k) = \frac{1}{4p} (x - h)^2
$$

- **Implementation in GeoGebra**: Define the vertex point using `A = (h, k)`. Enter `y - y(A) = (1 / (4 * p)) * (x - x(A))^2` into the input field. If $p$ is undefined, GeoGebra will generate a slider for $p$, which allows adjusting the parabola’s shape.

#### 4. Hyperbola

The standard form of a hyperbola centered at $(h, k)$, with transverse axis length $2a$ and conjugate axis length $2b$, is:

$$
\frac{(x - h)^2}{a^2} - \frac{(y - k)^2}{b^2} = 1
$$

- **Implementation in GeoGebra**: Define the center point using `A = (h, k)`. Input `((x - x(A))^2 / a^2) - ((y - y(A))^2 / b^2) = 1`. GeoGebra will create sliders for $a$ and $b$ if they are not defined, enabling dynamic manipulation of the hyperbola’s axes.

These implementations provide flexible ways to create and explore second-degree curves in GeoGebra, offering a dynamic approach to studying the properties of circles, ellipses, parabolas, and hyperbolas.


